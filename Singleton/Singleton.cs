namespace Singleton
{
    // Unsafe in a multi-threaded environment
    public class Singleton
    {
        // Конструктор Одиночки всегда должен быть скрытым, чтобы предотвратить
        // Создание объекта через оператор new.
        private Singleton()
        { }

        // Объект одиночки храниться в статичном поле класса. Существует
        // несколько способов инициализировать это поле, и все они имеют разные
        // достоинства и недостатки. В этом примере мы рассмотрим простейший из
        // них, недостатком которого является полная неспособность правильно
        // работать в многопоточной среде.
        private static Singleton _instance;

        // Это статический метод, управляющий доступом к экземпляру одиночки.
        // При первом запуске, он создаёт экземпляр одиночки и помещает его в
        // статическое поле. При последующих запусках, он возвращает клиенту
        // объект, хранящийся в статическом поле.
        public static Singleton GetInstance()
        {
            return _instance ?? (_instance = new Singleton());
        }

        /*
        public void someBusinessLogic()
        {
            Наконец, любой одиночка должен содержать некоторую бизнес-логику, 
            которая может быть выполнена на его экземпляре.
        }
        */
    }
}